{
    "name": "research_schematic_agent",
    "nodes": [
        {
            "parameters": {
                "formTitle": "Research Schematic Generator",
                "formFields": {
                    "values": [
                        {
                            "fieldLabel": "Research Description",
                            "placeholder": "Paste your research plan or description here",
                            "requiredField": true
                        },
                        {
                            "fieldLabel": "StylePrefs",
                            "placeholder": "Optional style preferences"
                        },
                        {
                            "fieldLabel": "Negatives",
                            "placeholder": "Optional negative prompts"
                        }
                    ]
                },
                "options": {}
            },
            "id": "f6a38d3b-9dcc-4b8b-a273-79f6beccf4bc",
            "name": "Form Input",
            "type": "n8n-nodes-base.formTrigger",
            "position": [
                -2416,
                -48
            ],
            "typeVersion": 2.3,
            "webhookId": "a25c21ac-31df-4127-a398-9d9b5d25e970"
        },
        {
            "parameters": {
                "jsCode": "// Normalize LLM output into a stable schema for image prompts\n// Always return: { visual_prompt: string, negative_prompt: string, layout_constraints: string, style: string, icons: string[] }\n\nfunction toStringSafe(value) {\n  if (value == null) return '';\n  if (typeof value === 'string') return value;\n  if (typeof value === 'object') {\n    if (typeof value.content === 'string') return value.content;\n    try { return JSON.stringify(value); } catch { return String(value); }\n  }\n  return String(value);\n}\n\nconst primaryText = ($json.text ?? $json.message?.content ?? $json.message ?? $json.choices?.[0]?.message?.content ?? $json.data?.[0]?.text ?? '');\nconst formInput = ($items('Form Input', 0, 0)?.json) || {};\n\nlet objectCandidate = null;\nif (typeof primaryText === 'string' && primaryText.trim()) {\n  try { objectCandidate = JSON.parse(primaryText); } catch (e) {}\n}\n\nconst result = {\n  visual_prompt: '',\n  negative_prompt: '',\n  layout_constraints: '',\n  style: '',\n  icons: []\n};\n\nif (objectCandidate && typeof objectCandidate === 'object' && !Array.isArray(objectCandidate)) {\n  result.visual_prompt = toStringSafe(objectCandidate.visual_prompt ?? objectCandidate.prompt ?? objectCandidate.description ?? '');\n  result.negative_prompt = toStringSafe(objectCandidate.negative_prompt ?? '');\n  result.layout_constraints = toStringSafe(objectCandidate.layout_constraints ?? objectCandidate.layout ?? '');\n  result.style = toStringSafe(objectCandidate.style ?? '');\n  const icons = objectCandidate.icons;\n  result.icons = Array.isArray(icons) ? icons.map(toStringSafe).filter(Boolean) : [];\n} else {\n  result.visual_prompt = toStringSafe(primaryText).trim();\n}\n\nif (!result.visual_prompt) {\n  result.visual_prompt = toStringSafe(formInput['Research Description']).trim();\n}\n\nreturn result;"
            },
            "id": "da85a208-6dc5-4d74-81f5-567eb3e7cb78",
            "name": "Parse Optimized JSON",
            "type": "n8n-nodes-base.code",
            "position": [
                -1872,
                -48
            ],
            "typeVersion": 2
        },
        {
            "parameters": {
                "resource": "image",
                "model": "gpt-image-1",
                "prompt": "={{ $json.visual_prompt }}",
                "options": {
                    "size": "1024x1024"
                }
            },
            "type": "@n8n/n8n-nodes-langchain.openAi",
            "typeVersion": 1.8,
            "position": [
                -1648,
                -48
            ],
            "id": "041eb0da-bd13-4945-b5af-a1dd032139ed",
            "name": "Generate Image (gpt-image-1)",
            "credentials": {
                "openAiApi": {
                    "id": "aop9amUFVOOwigGz",
                    "name": "OpenAi account 2"
                }
            }
        },
        {
            "parameters": {
                "jsCode": "// Convert binary 'data' to data URL in json.image_url for downstream usage.\nconst binary = $input.first().binary?.data;\nif (!binary) {\n  return { image_url: $json.image_url || $json.url || '' };\n}\nconst buffer = await this.helpers.getBinaryDataBuffer(0, 'data');\nconst mime = binary.mimeType || 'image/png';\nreturn { image_url: `data:${mime};base64,${buffer.toString('base64')}` };\n"
            },
            "id": "2efd4d04-6228-4b78-93d8-69fa10fa1df3",
            "name": "Binary to Data URL",
            "type": "n8n-nodes-base.code",
            "position": [
                -1456,
                -48
            ],
            "typeVersion": 2
        },
        {
            "parameters": {
                "assignments": {
                    "assignments": [
                        {
                            "id": "a-url",
                            "name": "image_url",
                            "type": "string",
                            "value": "={{$json.url || $json.data?.[0]?.url || $json.image_url}}"
                        }
                    ]
                },
                "options": {}
            },
            "id": "4fa87112-e293-4679-af61-1889ba0d50f0",
            "name": "Extract Image URL",
            "type": "n8n-nodes-base.set",
            "position": [
                -1280,
                -48
            ],
            "typeVersion": 3.4
        },
        {
            "parameters": {
                "resume": "form",
                "formTitle": "是否满意？",
                "formFields": {
                    "values": [
                        {
                            "fieldLabel": "是否要调整",
                            "fieldType": "dropdown",
                            "fieldOptions": {
                                "values": [
                                    {
                                        "option": "需要调整"
                                    },
                                    {
                                        "option": "无需调整"
                                    }
                                ]
                            }
                        }
                    ]
                },
                "options": {}
            },
            "id": "ff244d5b-8d24-4e33-ae2b-5cbabbfd047d",
            "name": "Wait for Feedback",
            "type": "n8n-nodes-base.wait",
            "position": [
                -1088,
                -48
            ],
            "webhookId": "{{ $json.id || 'research-schematic-feedback' }}",
            "typeVersion": 1.1
        },
        {
            "parameters": {
                "conditions": {
                    "options": {
                        "version": 2,
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "loose"
                    },
                    "conditions": [
                        {
                            "id": "c-approved",
                            "operator": {
                                "type": "string",
                                "operation": "equals"
                            },
                            "leftValue": "={{ $json[\"是否要调整\"] }}",
                            "rightValue": "无需调整"
                        }
                    ],
                    "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {}
            },
            "id": "cfe28871-c652-4fb9-ade3-e0deff7348f1",
            "name": "Approved?",
            "type": "n8n-nodes-base.if",
            "position": [
                -880,
                -48
            ],
            "typeVersion": 2.2
        },
        {
            "parameters": {
                "url": "={{$json.image_url}}",
                "options": {}
            },
            "id": "eebfeeab-e8c1-411c-bb1d-39a82c751e4a",
            "name": "Download Current Image",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
                -720,
                -48
            ],
            "typeVersion": 4.2
        },
        {
            "parameters": {
                "modelId": {
                    "__rl": true,
                    "value": "gpt-5",
                    "mode": "id"
                },
                "messages": {
                    "values": [
                        {
                            "content": "You are a senior academic visualization designer. You must return ONLY strict JSON with fields { visual_prompt, negative_prompt, layout_constraints, style, icons }. No extra text.",
                            "role": "system"
                        },
                        {
                            "content": "\"visual_prompt\": \"Professional academic schematic, serif font for all labels (Times/Georgia-like), white background, thin crisp lines, high-resolution vector feel. Main palette: clear blues and neutral grays. Use a soft but distinct orange as an accent color for fallback/retry. Clear arrows for information flow; minimal icons; no shadows. The diagram shows an AI Gateway in three vertical columns (left to right). Column 1: Client Application with a terminal/editor icon; a request packet labeled `Request: { model: \"critical-task-model\" }` and a solid blue arrow labeled API Call to the Gateway. Column 2: AI Gateway enclosed in a light gray box with (1) Model Abstraction & Routing mapping: \"critical-task-model\" -> [Gemini-1.5, GPT-4o, Claude-3]; (2) Fallback Waterfall Execution: Attempt 1 Gemini-1.5 Pro blue arrow to Gemini API; dashed orange arrow back labeled Error/Timeout to Attempt 2 GPT-4o; green success arrow from OpenAI API labeled 200 OK returning to Client; optional Attempt 3 Claude-3 Sonnet greyed out. Column 3: Upstream LLM Providers with three simple cloud/API icons.\",\n  \"negative_prompt\": \"no neon, no sans-serif, no heavy 3D, no drop shadows, no photo textures\",\n  \"layout_constraints\": \"Three columns left-to-right; consistent spacing and arrow styles; legend bottom-right; accent orange only for fallback arrows.\",\n  \"style\": \"serif labels, white canvas, thin lines, cool blue/gray palette, vector, minimalistic, orange accent for fallback\",\n  \"icons\": [\"terminal\", \"packet\", \"gear\", \"cloud\", \"arrow\", \"check\"]",
                            "role": "assistant"
                        },
                        {
                            "content": "=现在想针对这个文本{{ $json[\"Research Description\"] }}生成一个提示，请用简体中文生成"
                        }
                    ]
                },
                "options": {}
            },
            "type": "@n8n/n8n-nodes-langchain.openAi",
            "typeVersion": 1.8,
            "position": [
                -2224,
                -48
            ],
            "id": "ff5a16d1-7c66-4edd-bfc1-5a700affd10f",
            "name": "Message a model",
            "credentials": {
                "openAiApi": {
                    "id": "aop9amUFVOOwigGz",
                    "name": "OpenAi account 2"
                }
            }
        },
        {
            "parameters": {
                "resource": "image",
                "model": "gpt-image-1",
                "prompt": "=请根据一下建议，{{ $json[\"请问如何调整\"] }}，调整一下这个图片{{ $('Extract Image URL').item.json.image_url }}",
                "options": {}
            },
            "type": "@n8n/n8n-nodes-langchain.openAi",
            "typeVersion": 1.8,
            "position": [
                -448,
                192
            ],
            "id": "fb7dd85d-1229-49cd-833b-eaf5c1c9b1ff",
            "name": "Generate an image",
            "credentials": {
                "openAiApi": {
                    "id": "aop9amUFVOOwigGz",
                    "name": "OpenAi account 2"
                }
            }
        },
        {
            "parameters": {
                "resume": "form",
                "formTitle": "调整建议",
                "formFields": {
                    "values": [
                        {
                            "fieldLabel": "请问如何调整",
                            "requiredField": true
                        }
                    ]
                },
                "options": {}
            },
            "type": "n8n-nodes-base.wait",
            "typeVersion": 1.1,
            "position": [
                -688,
                192
            ],
            "id": "53238195-52e2-40b8-9dcf-b3ca13249240",
            "name": "Wait",
            "webhookId": "7ac0eb5b-da04-474f-9864-23c1761ac3ac"
        }
    ],
    "pinData": {},
    "connections": {
        "Form Input": {
            "main": [
                [
                    {
                        "node": "Message a model",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Parse Optimized JSON": {
            "main": [
                [
                    {
                        "node": "Generate Image (gpt-image-1)",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Generate Image (gpt-image-1)": {
            "main": [
                [
                    {
                        "node": "Binary to Data URL",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Binary to Data URL": {
            "main": [
                [
                    {
                        "node": "Extract Image URL",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Extract Image URL": {
            "main": [
                [
                    {
                        "node": "Wait for Feedback",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Wait for Feedback": {
            "main": [
                [
                    {
                        "node": "Approved?",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Approved?": {
            "main": [
                [
                    {
                        "node": "Download Current Image",
                        "type": "main",
                        "index": 0
                    }
                ],
                [
                    {
                        "node": "Wait",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Message a model": {
            "main": [
                [
                    {
                        "node": "Parse Optimized JSON",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Generate an image": {
            "main": [
                [
                    {
                        "node": "Extract Image URL",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Wait": {
            "main": [
                [
                    {
                        "node": "Generate an image",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        }
    },
    "active": false,
    "settings": {
        "executionOrder": "v1"
    },
    "versionId": "6f69e1a3-6db5-44d2-9d7b-0617f89dfd06",
    "meta": {
        "templateCredsSetupCompleted": true,
        "instanceId": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "id": "qmhVxwRAPJZwDt07",
    "tags": []
}