{
    "nodes": [
        {
            "parameters": {
                "formTitle": "Research Schematic Generator",
                "formFields": {
                    "values": [
                        {
                            "fieldLabel": "Research Description",
                            "placeholder": "Paste your research plan or description here",
                            "requiredField": true
                        },
                        {
                            "fieldLabel": "StylePrefs",
                            "placeholder": "Optional style preferences"
                        },
                        {
                            "fieldLabel": "Negatives",
                            "placeholder": "Optional negative prompts"
                        }
                    ]
                },
                "options": {}
            },
            "id": "b1884c6d-154a-40a1-80b2-649980b0dc79",
            "name": "Form Input",
            "type": "n8n-nodes-base.formTrigger",
            "position": [
                304,
                16
            ],
            "typeVersion": 2.3,
            "webhookId": "a25c21ac-31df-4127-a398-9d9b5d25e970"
        },
        {
            "parameters": {
                "jsCode": "// Normalize LLM output into a stable schema for image prompts\n// Always return: { visual_prompt: string, negative_prompt: string, layout_constraints: string, style: string, icons: string[] }\n\nfunction toStringSafe(value) {\n  if (value == null) return '';\n  if (typeof value === 'string') return value;\n  if (typeof value === 'object') {\n    if (typeof value.content === 'string') return value.content;\n    try { return JSON.stringify(value); } catch { return String(value); }\n  }\n  return String(value);\n}\n\nconst primaryText = ($json.text ?? $json.message?.content ?? $json.message ?? $json.choices?.[0]?.message?.content ?? $json.data?.[0]?.text ?? '');\nconst formInput = ($items('Form Input', 0, 0)?.json) || {};\n\nlet objectCandidate = null;\nif (typeof primaryText === 'string' && primaryText.trim()) {\n  try { objectCandidate = JSON.parse(primaryText); } catch (e) {}\n}\n\nconst result = {\n  visual_prompt: '',\n  negative_prompt: '',\n  layout_constraints: '',\n  style: '',\n  icons: []\n};\n\nif (objectCandidate && typeof objectCandidate === 'object' && !Array.isArray(objectCandidate)) {\n  result.visual_prompt = toStringSafe(objectCandidate.visual_prompt ?? objectCandidate.prompt ?? objectCandidate.description ?? '');\n  result.negative_prompt = toStringSafe(objectCandidate.negative_prompt ?? '');\n  result.layout_constraints = toStringSafe(objectCandidate.layout_constraints ?? objectCandidate.layout ?? '');\n  result.style = toStringSafe(objectCandidate.style ?? '');\n  const icons = objectCandidate.icons;\n  result.icons = Array.isArray(icons) ? icons.map(toStringSafe).filter(Boolean) : [];\n} else {\n  result.visual_prompt = toStringSafe(primaryText).trim();\n}\n\nif (!result.visual_prompt) {\n  result.visual_prompt = toStringSafe(formInput['Research Description']).trim();\n}\n\nreturn result;"
            },
            "id": "9e811751-3cad-4f56-b170-ac32b124c527",
            "name": "Parse Optimized JSON",
            "type": "n8n-nodes-base.code",
            "position": [
                880,
                16
            ],
            "typeVersion": 2
        },
        {
            "parameters": {
                "resource": "image",
                "model": "gpt-image-1",
                "prompt": "='Create a high-resolution academic schematic based on the subject below.\\n' + 'Subject: ' + {{$json.visual_prompt}} + '\\n' + 'Layout constraints: ' + {{$json.layout_constraints}} + '\\n' + 'Style: ' + {{$json.style}} + '\\n' + 'Avoid: ' + {{$json.negative_prompt}}",
                "options": {
                    "size": "1536x1024"
                }
            },
            "type": "@n8n/n8n-nodes-langchain.openAi",
            "typeVersion": 1.8,
            "position": [
                1104,
                16
            ],
            "id": "5a452cda-163a-4a43-8b52-8dcd4505feaf",
            "name": "Generate Image (gpt-image-1)",
            "alwaysOutputData": false,
            "credentials": {
                "openAiApi": {
                    "id": "aop9amUFVOOwigGz",
                    "name": "OpenAi account"
                }
            }
        },
        {
            "parameters": {
                "resume": "form",
                "formTitle": "是否满意？",
                "formFields": {
                    "values": [
                        {
                            "fieldLabel": "是否要调整",
                            "fieldType": "dropdown",
                            "fieldOptions": {
                                "values": [
                                    {
                                        "option": "需要调整"
                                    },
                                    {
                                        "option": "无需调整"
                                    }
                                ]
                            }
                        }
                    ]
                },
                "options": {}
            },
            "id": "b3580c06-a141-4e4b-aea2-348f29e9ceb7",
            "name": "Wait for Feedback",
            "type": "n8n-nodes-base.wait",
            "position": [
                1424,
                -208
            ],
            "webhookId": "{{ $json.id || 'research-schematic-feedback' }}",
            "typeVersion": 1.1
        },
        {
            "parameters": {
                "conditions": {
                    "options": {
                        "version": 2,
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "loose"
                    },
                    "conditions": [
                        {
                            "id": "c-approved",
                            "operator": {
                                "type": "string",
                                "operation": "equals"
                            },
                            "leftValue": "={{ $json[\"是否要调整\"] }}",
                            "rightValue": "无需调整"
                        }
                    ],
                    "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {}
            },
            "id": "a8af44b0-c070-46c3-a45f-c3b25c326653",
            "name": "Approved?",
            "type": "n8n-nodes-base.if",
            "position": [
                1648,
                -208
            ],
            "typeVersion": 2.2
        },
        {
            "parameters": {
                "modelId": {
                    "__rl": true,
                    "value": "gpt-5",
                    "mode": "id"
                },
                "messages": {
                    "values": [
                        {
                            "content": "You are a senior academic visualization designer. Return ONLY strict JSON (one object) with fields: { \"visual_prompt\", \"negative_prompt\", \"layout_constraints\", \"style\", \"icons\" }. Rules:\n- Output must be valid JSON, ASCII double quotes, no markdown, no code fences, no extra text.\n- Language: English.\n- \"visual_prompt\": <= 220 tokens, concrete scene description and content semantics (what to draw), not styling.\n- \"negative_prompt\": concise comma-separated bans (e.g., \"neon, drop shadows, photo textures\").\n- \"layout_constraints\": structural instructions (columns/sections/flows/legends/arrow styles).\n- \"style\": palette, typography, stroke weights, rendering feel (vector/minimal/serif).\n- \"icons\": 4-10 short nouns for small pictograms (e.g., \"terminal\", \"cloud\", \"arrow\").\n- If any field is not applicable, use an empty string or [].",
                            "role": "system"
                        },
                        {
                            "content": "{\n  \"visual_prompt\": \"Academic schematic showing an AI gateway between a client app and multiple LLM providers. Three vertical columns: left Client Application with a terminal/editor icon; center Gateway box with model routing and fallback arrows; right Providers (three simple cloud/API icons). Clear label text on major blocks and arrows; arrows show request, error retry, and success return.\",\n  \"negative_prompt\": \"neon, drop shadows, photo textures, heavy 3D, sans serif\",\n  \"layout_constraints\": \"Three columns left-right; consistent spacing; solid blue arrows for normal flow; dashed orange arrows only for fallback; legend bottom-right.\",\n  \"style\": \"serif labels (Times/Georgia-like), white canvas, thin crisp lines, cool blue/gray palette, vector, minimalistic, orange accent for fallback\",\n  \"icons\": [\"terminal\", \"packet\", \"gear\", \"cloud\", \"arrow\", \"check\"]\n}",
                            "role": "assistant"
                        },
                        {
                            "content": "=Using the research description below, produce ONE strict JSON object with the required fields and rules above. Return ONLY the JSON.\n\nResearch Description:\n{{$json[\"Research Description\"]}}\n\nOptional style preferences to incorporate:\n{{$json[\"StylePrefs\"]}}\n\nOptional negatives to include in negative_prompt:\n{{$json[\"Negatives\"]}}"
                        }
                    ]
                },
                "options": {}
            },
            "type": "@n8n/n8n-nodes-langchain.openAi",
            "typeVersion": 1.8,
            "position": [
                528,
                16
            ],
            "id": "69e1ef5e-c5e9-4397-9f18-65de6cc3bc03",
            "name": "Message a model",
            "credentials": {
                "openAiApi": {
                    "id": "aop9amUFVOOwigGz",
                    "name": "OpenAi account"
                }
            }
        },
        {
            "parameters": {
                "resume": "form",
                "formTitle": "调整建议",
                "formFields": {
                    "values": [
                        {
                            "fieldLabel": "请问如何调整",
                            "requiredField": true
                        }
                    ]
                },
                "options": {}
            },
            "type": "n8n-nodes-base.wait",
            "typeVersion": 1.1,
            "position": [
                1872,
                -208
            ],
            "id": "d4246956-6830-483f-bd56-c35ce169d768",
            "name": "Wait",
            "webhookId": "7ac0eb5b-da04-474f-9864-23c1761ac3ac"
        },
        {
            "parameters": {
                "resource": "image",
                "operation": "edit",
                "prompt": "= 'Make ONLY the following edits to the image; keep all other content unchanged (objects, labels, topology, proportions, resolution).\\nRequested edits:\\n' + $json['请问如何调整'] + '\\n\\nHard constraints:\\n- Preserve all existing labels and their wording.\\n- Do not add watermarks or logos.\\n- Keep a clean white background and vector-like rendering.\\n- Maintain arrow directions and semantic flow; adjust layout only as needed.'",
                "images": {
                    "values": [
                        {}
                    ]
                },
                "options": {}
            },
            "type": "@n8n/n8n-nodes-langchain.googleGemini",
            "typeVersion": 1,
            "position": [
                1760,
                16
            ],
            "id": "525c2f28-1e7f-48d6-9450-56feba1f3a1a",
            "name": "Edit an image",
            "credentials": {
                "googlePalmApi": {
                    "id": "qi4P9ShSuZVwD2SN",
                    "name": "Google Gemini(PaLM) Api account"
                }
            }
        },
        {
            "parameters": {
                "numberInputs": 3
            },
            "type": "n8n-nodes-base.merge",
            "typeVersion": 3.2,
            "position": [
                1536,
                0
            ],
            "id": "ac5b4872-aff9-47b5-89c2-150078f87f41",
            "name": "Merge"
        },
        {
            "parameters": {
                "content": "## 1. 生成图片\n- 输入研究描述（可选：StylePrefs、Negatives）\n- 自动产出严格 JSON 提示并调用 gpt-image-1 生成初稿，**点击生图节点预览图片或者下载**\n- 布局/风格/负面提示将一并注入，提升可控性",
                "height": 384,
                "width": 768
            },
            "type": "n8n-nodes-base.stickyNote",
            "position": [
                480,
                -176
            ],
            "typeVersion": 1,
            "id": "518a38d1-8167-4688-8fb4-e67b73060d48",
            "name": "Sticky Note"
        },
        {
            "parameters": {
                "content": "## 2. 调整图片\n- 选择“是否要调整”\n- 如需调整，填写具体修改点（增删标签/调整箭头/配色等）\n- 在不改变语义结构的前提下进行增量编辑并返回新图",
                "height": 576,
                "width": 784
            },
            "type": "n8n-nodes-base.stickyNote",
            "position": [
                1328,
                -368
            ],
            "typeVersion": 1,
            "id": "76aa4046-cf3d-4d5e-bdc1-7929b3564fec",
            "name": "Sticky Note1"
        },
        {
            "parameters": {
                "content": "## 配置说明\n- 在 Credentials 中配置并选择 OpenAI 与 Gemini 账户\n- 可在 `Generate Image (gpt-image-1)` 的 options.size 调整分辨率\n- 表单字段：Research Description（必填）、StylePrefs、Negatives（可选）\n- 反馈节点 `Wait for Feedback` 的 webhookId 可自定义\n- 编辑功能需提供原图二进制：上传到 `data` 属性或由上游节点传入",
                "height": 448,
                "width": 768
            },
            "type": "n8n-nodes-base.stickyNote",
            "position": [
                480,
                -368
            ],
            "typeVersion": 1,
            "id": "68f1ca7b-2d03-496f-846f-6a0d733654b6",
            "name": "Sticky Note2"
        }
    ],
    "connections": {
        "Form Input": {
            "main": [
                [
                    {
                        "node": "Message a model",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Parse Optimized JSON": {
            "main": [
                [
                    {
                        "node": "Generate Image (gpt-image-1)",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Generate Image (gpt-image-1)": {
            "main": [
                [
                    {
                        "node": "Wait for Feedback",
                        "type": "main",
                        "index": 0
                    },
                    {
                        "node": "Merge",
                        "type": "main",
                        "index": 1
                    }
                ]
            ]
        },
        "Wait for Feedback": {
            "main": [
                [
                    {
                        "node": "Approved?",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Approved?": {
            "main": [
                [],
                [
                    {
                        "node": "Wait",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Message a model": {
            "main": [
                [
                    {
                        "node": "Parse Optimized JSON",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Wait": {
            "main": [
                [
                    {
                        "node": "Merge",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Edit an image": {
            "main": [
                [
                    {
                        "node": "Wait for Feedback",
                        "type": "main",
                        "index": 0
                    },
                    {
                        "node": "Merge",
                        "type": "main",
                        "index": 2
                    }
                ]
            ]
        },
        "Merge": {
            "main": [
                [
                    {
                        "node": "Edit an image",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        }
    },
    "pinData": {},
    "meta": {
        "instanceId": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    }
}